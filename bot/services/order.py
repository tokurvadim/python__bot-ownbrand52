import os, time
from aiogram import Router, F, Bot, types
from aiogram.filters import Command, callback_data
from aiogram.types import CallbackQuery, Message, InlineKeyboardButton, BotCommand, LabeledPrice, PreCheckoutQuery, ContentType
from aiogram.utils.keyboard import InlineKeyboardBuilder
from aiogram.types.input_file import FSInputFile
from aiogram.types.web_app_info import WebAppInfo
from aiogram.enums import ParseMode
from aiogram.exceptions import TelegramBadRequest
from aiogram.methods import create_chat_invite_link, answer_pre_checkout_query, SendInvoice
from pprint import pprint
from dotenv import load_dotenv
import datetime
import yookassa
load_dotenv()

from main import db, bot_main, dp
from services.yookassa_data import create_payment

router = Router()

provider_token = os.getenv('TELEGRAM_PAYMENT_TOKEN')
channel_id = os.getenv('TELEGRAM_CHANNEL_ID')

class MyCallbackData(callback_data.CallbackData, prefix="_"):
    days: int
    price: int


@router.callback_query(F.data == 'order_choice')
async def order_choice(clb: CallbackQuery, bot: Bot) -> SendInvoice:
    text = '–í—ã–±–µ—Ä–∏—Ç–µ –∂–µ–ª–∞–µ–º—ã–π –≤–∞—Ä–∏–∞–Ω—Ç –ø–æ–¥–ø–∏—Å–∫–∏:'

    builder = InlineKeyboardBuilder()
    prices = db.get_table_price()

    for price in prices:
        callback = MyCallbackData(days=price[0], price=price[1]).pack()
        builder.row(InlineKeyboardButton(text=f'{price[0]} –¥–Ω–µ–π: {price[1]} RUB üí∞', callback_data=callback))

    builder.row(InlineKeyboardButton(text='‚¨ÖÔ∏è –ù–∞–∑–∞–¥', callback_data='start'))

    await clb.bot.delete_message(chat_id=clb.message.chat.id, message_id=clb.message.message_id)

    await clb.message.answer(
        text=text,
        reply_markup=builder.as_markup(),
        parse_mode=ParseMode.MARKDOWN_V2
    )


@router.callback_query(MyCallbackData.filter())
async def order(clb: CallbackQuery, bot: Bot, callback_data: MyCallbackData):
    try:
        payment_url, payment_id = create_payment(amount=callback_data.price, user_id=clb.message.chat.id)

        payment = yookassa.Payment.find_one(payment_id=payment_id)

        print(f'–ó–∞–ø—Ä–æ—Å –Ω–∞ –ø–ª–∞—Ç–µ–∂ –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {clb.message.chat.id} –Ω–∞ —Å—É–º–º—É {payment.amount.value} RUB')

        text: str = 'üî• –í–∞—à–∞ —Å—Å—ã–ª–∫–∞ –Ω–∞ –æ–ø–ª–∞—Ç—É –≥–æ—Ç–æ–≤–∞\! –í—ã –≤ –æ–¥–Ω–æ–º —à–∞–≥–µ –æ—Ç –ø–æ–ª—É—á–µ–Ω–∏—è –ª—É—á—à–∏—Ö —Å–æ–≤–µ—Ç–æ–≤ –ø–æ –ø—Ä–æ–¥–≤–∏–∂–µ–Ω–∏—é –ª–∏—á–Ω–æ–≥–æ –±—Ä–µ–Ω–¥–∞\!\n‚ùó*–í–ù–ò–ú–ê–ù–ò–ï:* –ø–æ—Å–ª–µ –ø—Ä–æ–≤–µ–¥–µ–Ω–∏—è –æ–ø–ª–∞—Ç—ã *–û–ë–Ø–ó–ê–¢–ï–õ–¨–ù–û* –Ω–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É *‚úÖ –ü—Ä–æ–≤–µ—Ä–∏—Ç—å –ø–æ–¥–ø–∏—Å–∫—É* –¥–ª—è —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ –æ–ø–ª–∞—Ç—ã –≤–Ω—É—Ç—Ä–∏ –±–æ—Ç–∞\!"'

        builder = InlineKeyboardBuilder()
        builder.row(InlineKeyboardButton(text='üíú –û–ø–ª–∞—Ç–∏—Ç—å', url=payment_url))
        builder.row(InlineKeyboardButton(text='‚úÖ –ü—Ä–æ–≤–µ—Ä–∏—Ç—å –ø–æ–¥–ø–∏—Å–∫—É', callback_data=f'check_{payment_id}_{int(payment.amount.value)}'))

        await clb.bot.delete_message(chat_id=clb.message.chat.id, message_id=clb.message.message_id)

        await clb.message.answer(text=text, reply_markup=builder.as_markup(), parse_mode=ParseMode.MARKDOWN_V2)
    except Exception:
        print(f'–ü–ª–∞—Ç–µ–∂ –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {clb.message.chat.id} –Ω–µ –ø—Ä–æ—à–µ–ª')

        text = 'ü§ï –ö–∞–∂–µ—Ç—Å—è, —á—Ç–æ-—Ç–æ –ø–æ—à–ª–æ –Ω–µ —Ç–∞–∫... –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø—Ä–æ–≤–µ—Å—Ç–∏ –æ–ø–ª–∞—Ç—É –ø–æ–∑–∂–µ.'

        builder = InlineKeyboardBuilder()
        builder.row(InlineKeyboardButton(text='‚¨ÖÔ∏è –ù–∞–∑–∞–¥', callback_data='start'))

        await clb.bot.delete_message(chat_id=clb.message.chat.id, message_id=clb.message.message_id)
        await clb.message.answer(text=text, reply_markup=builder.as_markup())





@router.callback_query(lambda c: 'check' in c.data)
async def check_payment(clb: CallbackQuery):
    result = check(clb.data.split('_')[-2])
    payment_amount = int(clb.data.split('_')[-1])

    if result:
        print(f'–ü–ª–∞—Ç–µ–∂ –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {clb.message.chat.id} –ø—Ä–æ—à–µ–ª —É—Å–ø–µ—à–Ω–æ')

        prices = db.get_price_data()
        subscribe: int

        for price in prices.items():
            if price[1] == payment_amount:
                subscribe = price[0]

        db.update_user_subscribe(subscribe=subscribe, user_telegram_id=clb.message.chat.id)

        user_status = db.get_user_status(user_telegram_id=clb.message.chat.id)[0]

        if user_status == 1:
            text = 'ü§©*–ü–æ–∑–¥—Ä–∞–≤–ª—è–µ–º –≤–∞—Å —Å –ø—Ä–æ–¥–ª–µ–Ω–∏–µ–º –ø–æ–¥–ø–∏—Å–∫–∏\!*\n–¢–µ–ø–µ—Ä—å –≤—ã –º–æ–∂–µ—Ç–µ –µ—â–µ –¥–æ–ª—å—à–µ —Å–æ—Å—Ç–∞–≤–ª—è—Ç—å —Å–≤–æ–π –ª–∏—á–Ω—ã–π –±—Ä–µ–Ω–¥\!'

            builder = InlineKeyboardBuilder()
            builder.row(InlineKeyboardButton(text='‚¨ÖÔ∏è –í –Ω–∞—á–∞–ª–æ', callback_data='start'))

            await clb.message.delete()
            await clb.message.answer(text=text, reply_markup=builder.as_markup(), parse_mode=ParseMode.MARKDOWN_V2)

        else:
            db.update_user_status(user_telegram_id=clb.message.chat.id, status=1)

            date = datetime.datetime.now() + datetime.timedelta(days=1)
            link = await clb.bot.create_chat_invite_link(chat_id=channel_id, member_limit=1, creates_join_request=False, expire_date=date, name='own_brand_52')
            text = f'ü•≥ –ü–æ–∑–¥—Ä–∞–≤–ª—è–µ–º —Å–æ –≤—Å—Ç—É–ø–ª–µ–Ω–∏–µ–º –≤ –ª—É—á—à–∏–π –∫–∞–Ω–∞–ª –ø–æ —Å–æ—Å—Ç–∞–≤–ª–µ–Ω–∏—é –ª–∏—á–Ω–æ–≥–æ –±—Ä–µ–Ω–¥–∞! –°—Å—ã–ª–∫–∞ –Ω–∞ –≤—Ö–æ–¥ –≤ –≥—Ä—É–ø–ø—É —É–∂–µ —Å—Ñ–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∞: {link.invite_link}\n‚ùó*–í–ù–ò–ú–ê–ù–ò–ï:* —Å—Å—ã–ª–∫–∞ –¥–µ–π—Å—Ç–≤—É–µ—Ç —Ç–æ–ª—å–∫–æ 1 —Ä–∞–∑ –∏ –∏—Å—Ç–µ–∫–∞–µ—Ç –≤ —Ç–µ—á–µ–Ω–∏–µ 24 —á–∞—Å–æ–≤!'

            await clb.message.delete()
            await clb.message.answer(text=text)

    else:
        print(f'–ü–ª–∞—Ç–µ–∂ –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {clb.message.chat.id} –Ω–µ –ø—Ä–æ—à–µ–ª')

        text = 'ü§ï –ö–∞–∂–µ—Ç—Å—è, —á—Ç–æ-—Ç–æ –ø–æ—à–ª–æ –Ω–µ —Ç–∞–∫... –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø—Ä–æ–≤–µ—Å—Ç–∏ –æ–ø–ª–∞—Ç—É –ø–æ–∑–∂–µ.'

        builder = InlineKeyboardBuilder()
        builder.row(InlineKeyboardButton(text='‚¨ÖÔ∏è –ù–∞–∑–∞–¥', callback_data='start'))

        await clb.message.delete()
        await clb.message.answer(text=text, reply_markup=builder.as_markup())
    


def check(payment_id):
    payment = yookassa.Payment.find_one(payment_id=payment_id)
    return payment.status == 'succeeded'