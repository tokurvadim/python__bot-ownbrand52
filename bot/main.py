import os
import asyncio
import logging
import schedule

from aiogram import Dispatcher, Bot, F
from aiogram.types import BotCommand, ContentType, InlineKeyboardButton
from aiogram.utils.keyboard import InlineKeyboardBuilder
from aiogram.exceptions import TelegramForbiddenError
from aiogram.enums import ParseMode
from dotenv import load_dotenv
import datetime

from data.DataBase import DataBase

# –ü–æ–¥–∫–ª—é—á–∞–µ–º –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö
db = DataBase('bot/data/database.db')

# –î–∏—Å–ø–∞—Ç—á–µ—Ä
dp = Dispatcher()

load_dotenv()

bot_main = Bot(token=os.getenv('TELEGRAM_BOT_TOKEN'))


from services import start, order, my_subscribe, contacts


async def main_bot():
    dp.include_routers(
        start.router,
        order.router,
        my_subscribe.router,
        contacts.router,
    )

    await bot_main.delete_my_commands()

    basic_commands = [
        BotCommand(command="/start", description="–ù–∞—á–∞—Ç—å")
    ]

    users = db.get_users()
    schedule.every().day.at("09:00").do(check_subscribe, users=users, bot=bot_main)

    await bot_main.set_my_commands(commands=basic_commands)

    await dp.start_polling(bot_main, skip_updates=True)


async def waiter():
    while True:
        await asyncio.sleep(15)
        schedule.run_pending()


def check_subscribe(users: list, bot: Bot):
    for user in users:
        try:
            user_status = user[3]
            user_id = user[0]

            db.reduce_user_subscribe(user_telegram_id=user_id)
            user_subscribe = db.get_user_subscribe(user_telegram_id=user_id)[0]

            builder = InlineKeyboardBuilder()
            builder.row(InlineKeyboardButton(text='üîó –ü—Ä–æ–¥–ª–∏—Ç—å –ø–æ–¥–ø–∏—Å–∫—É', callback_data='order_choice'))

            if user_subscribe == 1:
                text = '‚ùó*–í–ù–ò–ú–ê–ù–ò–ï!* –ù–∞–ø–æ–º–∏–Ω–∞–µ–º, —á—Ç–æ –≤–∞—à–∞ –ø–æ–¥–ø–∏—Å–∫–∞ –Ω–∞ –∫–∞–Ω–∞–ª *–õ–∏—á–Ω—ã–π –±—Ä–µ–Ω–¥* –∑–∞–∫–æ–Ω—á–∏—Ç—Å—è —É–∂–µ –∑–∞–≤—Ç—Ä–∞\!\n–ß—Ç–æ–±—ã –Ω–µ –ø–æ—Ç–µ—Ä—è—Ç—å –¥–æ—Å—Ç—É–ø, —Ä–µ–∫–æ–º–µ–Ω—É–¥–µ–º –ø—Ä–æ–¥–ª–∏—Ç—å –ø–æ–¥–ø–∏—Å–∫—É\.'
                asyncio.run_coroutine_threadsafe(coro=bot.send_message(chat_id=user_id, text=text, reply_markup=builder.as_markup(), parse_mode=ParseMode.MARKDOWN_V2), loop=asyncio.get_event_loop())

            elif user_subscribe == 0 and user_status:
                db.update_user_status(user_telegram_id=user_id, status=0)

                asyncio.run_coroutine_threadsafe(coro=bot.ban_chat_member(chat_id=os.getenv('TELEGRAM_CHANNEL_ID'), user_id=user[0], until_date=datetime.datetime.now() + datetime.timedelta(seconds=60)), loop=asyncio.get_event_loop())

                text = '‚ùó–£–≤–µ–¥–æ–º–ª—è–µ–º –≤–∞—Å, —á—Ç–æ –ø–æ–¥–ø–∏—Å–∫–∞ –Ω–∞ –∫–∞–Ω–∞–ª *–õ–∏—á–Ω—ã–π –±—Ä–µ–Ω–¥* –ø–æ–¥–æ—à–ª–∞ –∫ –∫–æ–Ω—Ü—É, –≤—ã –±—ã–ª–∏ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –∏—Å–∫–ª—é—á–µ–Ω—ã –∏–∑ –∫–∞–Ω–∞–ª–∞\. –ß—Ç–æ–±—ã –≤–µ—Ä–Ω—É—Ç—å –¥–æ—Å—Ç—É–ø, –ø—Ä–æ–¥–ª–∏—Ç–µ –ø–æ–¥–ø–∏—Å–∫—É\.\n*–í–ù–ò–ú–ê–ù–ò–ï*: –ø–æ—Å–ª–µ –ø–æ–ª—É—á–µ–Ω–∏—è —ç—Ç–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è –ø–æ–¥–æ–∂–¥–∏—Ç–µ –†–û–í–ù–û 60 —Å–µ–∫—É–Ω–¥, –ø—Ä–µ–∂–¥–µ —á–µ–º –ø—Ä–æ–¥–ª–∏—Ç—å –ø–æ–¥–ø–∏—Å–∫—É\.'

                asyncio.run_coroutine_threadsafe(coro=bot.send_message(chat_id=user_id, text=text, reply_markup=builder.as_markup(), parse_mode=ParseMode.MARKDOWN_V2), loop=asyncio.get_event_loop())

            else:
                pass

        except TelegramForbiddenError:
            db.delete_user(user_telegram_id=user_id)



async def main():
    await asyncio.gather(main_bot(), waiter())


if __name__ == '__main__':
    logging.basicConfig(level=logging.INFO)

    db.create_tables()
    asyncio.run(main())